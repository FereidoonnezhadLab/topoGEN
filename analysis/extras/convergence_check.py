import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.cm import viridis
from matplotlib.lines import Line2D
import os
from matplotlib import rcParams, font_manager
from scipy.interpolate import interp1d
from matplotlib import rcParams, font_manager
font_path_regular = 'D:/FONT/SourceSansPro-Regular.otf'
font_path_bold = 'D:/FONT/SourceSansPro-Bold.otf'
font_manager.fontManager.addfont(font_path_regular)
font_manager.fontManager.addfont(font_path_bold)
rcParams['font.sans-serif'] = ['Source Sans Pro']
rcParams['font.family'] = 'sans-serif'
rcParams['font.weight'] = 'regular'

from TopoGEN.utils.setup import setup_output_directory
job_description = "ResultsPlots"
output_directory = setup_output_directory(job_description)


# Define the smooth step function
def smooth_step(t):
    return t**3 * (10 - 15*t + 6*t**2)

t_new = np.linspace(0.0, 1, 101)
strain = np.array([smooth_step(time) for time in t_new])
strain_adjusted = strain * 0.5


"""
Convergence Check 
RVE changes in dimension and # SEEDS
what remain constant is the 700 MPa elastic modulus of the fibrils
the average length of 2 um
the radius of 0.08 um 
the valency of 3.20
"""
# RVE = 20
DomainPhysicalDimension = 20
RF_20_1 = """2.92E-06
7.69E-06
1.58E-05
2.81E-05
5.43E-05
9.44E-05
0.000151411
0.000228071
0.000326952
0.00045041
0.000600609
0.000779526
0.000988964
0.00123056
0.00150581
0.00181607
0.0021626
0.00254654
0.00296901
0.00343106
0.00393373
0.00447808
0.00506521
0.00569624
0.00637236
0.00709485
0.00786505
0.00868437
0.00955433
0.0104765
0.0114527
0.0124847
0.0135744
0.0147239
0.0159355
0.0172117
0.0185553
0.0199691
0.0214565
0.0230212
0.0246673
0.0263996
0.0282234
0.0301449
0.0321713
0.0343108
0.0365725
0.0389663
0.0415018
0.0441881
0.0470329
0.0500431
0.0532244
0.0565826
0.0601235
0.0638537
0.0677801
0.0719102
0.0762514
0.0808106
0.0855944
0.0906083
0.0958569
0.101343
0.107068
0.113032
0.119231
0.125659
0.132308
0.139166
0.146217
0.153443
0.160821
0.168323
0.175918
0.183571
0.191242
0.198889
0.206464
0.213919
0.221205
0.22827
0.235065
0.241543
0.247658
0.253372
0.258649
0.263462
0.267792
0.271627
0.274965
0.277812
0.280183
0.282102
0.283604
0.284728
0.285522
0.286043
0.286352
0.286489
0.286565
"""
RF_20_2 = """1.28E-06
3.38E-06
6.95E-06
1.24E-05
2.39E-05
4.16E-05
6.68E-05
0.000100896
0.000145082
0.000200615
0.000268721
0.00035063
0.000447594
0.000560908
0.000691931
0.000842102
0.00101297
0.0012062
0.00142362
0.00166725
0.00193929
0.00224219
0.00257864
0.00295163
0.00336445
0.00382072
0.00432444
0.00487995
0.00549203
0.00616585
0.00690707
0.00772187
0.00861754
0.00960216
0.0106843
0.0118733
0.0131793
0.0146126
0.0161843
0.0179066
0.0197927
0.0218565
0.0241126
0.0265763
0.0292625
0.0321846
0.0353531
0.0387733
0.0424438
0.0463568
0.0504999
0.0548608
0.0594308
0.0642043
0.0692515
0.0745497
0.0801217
0.0859917
0.0921878
0.09867
0.105496
0.112681
0.120236
0.12817
0.136486
0.145183
0.154252
0.163681
0.173452
0.183539
0.193912
0.204536
0.215367
0.226358
0.237455
0.248598
0.259723
0.270765
0.281651
0.292313
0.302679
0.312679
0.322248
0.331324
0.339851
0.347781
0.355074
0.3617
0.367639
0.372883
0.377433
0.381305
0.384523
0.387124
0.389156
0.390675
0.391748
0.392451
0.392867
0.393052
0.393155
"""
RF_20_3 = """3.26E-06
8.59E-06
1.77E-05
3.14E-05
6.06E-05
0.000105386
0.000169003
0.000254561
0.000364912
0.000502675
0.000670252
0.00086983
0.00110339
0.00137271
0.00167941
0.0020249
0.00241047
0.00283723
0.00330622
0.00381834
0.00437443
0.00497531
0.00562176
0.00631458
0.00705461
0.00784278
0.00868009
0.0095677
0.0105069
0.011499
0.0125457
0.0136488
0.0148101
0.0160318
0.0173162
0.0186656
0.0200827
0.0215702
0.023131
0.0247682
0.0264849
0.0282844
0.0301701
0.0321456
0.0342149
0.036382
0.0386512
0.0410267
0.043513
0.0461143
0.0488346
0.0516779
0.0546483
0.0577496
0.0609858
0.0643607
0.0678776
0.0715397
0.0753497
0.0793095
0.0834206
0.0876832
0.0920969
0.09666
0.101369
0.106221
0.111208
0.116323
0.121557
0.126898
0.132331
0.137841
0.143409
0.149014
0.154634
0.160242
0.165811
0.171313
0.176718
0.181993
0.187109
0.192034
0.196739
0.201195
0.205378
0.209266
0.212839
0.216085
0.218994
0.221562
0.22379
0.225686
0.227262
0.228536
0.229531
0.230275
0.230801
0.231145
0.231349
0.23144
0.23149
"""
RF_20_4 = """1.38E-06
3.63E-06
7.46E-06
1.33E-05
2.56E-05
4.45E-05
7.15E-05
0.000107698
0.000154498
0.00021302
0.000284348
0.000369503
0.000469446
0.000585088
0.000717297
0.000866915
0.00103476
0.00122165
0.0014284
0.00165585
0.00190488
0.00217644
0.00247152
0.00279121
0.00313674
0.00350943
0.00391075
0.00434236
0.00480605
0.00530383
0.00583789
0.0064106
0.00702453
0.00768244
0.00838728
0.00914216
0.00995036
0.0108154
0.0117408
0.0127306
0.0137888
0.0149196
0.0161276
0.0174175
0.0187942
0.0202628
0.0218287
0.0234972
0.025274
0.0271645
0.0291744
0.0313091
0.0335741
0.0359744
0.0385152
0.0412011
0.0440365
0.0470254
0.0501713
0.0534769
0.0569446
0.0605757
0.0643705
0.0683285
0.0724476
0.0767244
0.0811538
0.0857288
0.0904404
0.0952774
0.100226
0.105271
0.110392
0.115569
0.120779
0.125995
0.13119
0.136333
0.141395
0.146344
0.151149
0.155779
0.160205
0.164399
0.168337
0.171996
0.17536
0.178415
0.181152
0.183568
0.185664
0.187447
0.188928
0.190126
0.191061
0.19176
0.192254
0.192578
0.192769
0.192854
0.192902
"""
RF_20_5 = """5.35E-06
1.41E-05
2.89E-05
5.14E-05
9.92E-05
0.000172364
0.000276214
0.000415667
0.000595173
0.000818722
0.00108984
0.00141158
0.00178655
0.00221689
0.00270428
0.00324998
0.00385486
0.00451939
0.00524369
0.0060276
0.00687069
0.00777233
0.00873177
0.00974819
0.0108208
0.0119489
0.0131319
0.0143697
0.0156624
0.0170107
0.0184159
0.01988
0.021406
0.0229977
0.02466
0.0263979
0.0282173
0.030124
0.0321242
0.0342247
0.036433
0.0387569
0.0412043
0.0437814
0.0464435
0.0492665
0.0522622
0.0554431
0.0588259
0.0624865
0.0664125
0.0706726
0.0753072
0.0803438
0.0857984
0.0916512
0.097864
0.104427
0.111339
0.118605
0.126234
0.134237
0.142626
0.151415
0.160618
0.170245
0.180303
0.190795
0.201717
0.213058
0.224799
0.236913
0.249361
0.262096
0.27506
0.288185
0.301396
0.314609
0.327735
0.340678
0.353343
0.365635
0.37746
0.38873
0.399365
0.409292
0.418452
0.426798
0.434298
0.440932
0.4467
0.451614
0.455704
0.459012
0.461598
0.463533
0.4649
0.465796
0.466326
0.466563
0.466694
"""
RF_20 = [np.array([float(x) for x in rf.split()]) for rf in [RF_20_1, RF_20_2, RF_20_3, RF_20_4, RF_20_5]]

S_20 = [rf * (1000 * 1000) / (DomainPhysicalDimension ** 2) for rf in RF_20]

mean_S_20 = np.mean(S_20, axis=0)
std_S_20 = np.std(S_20, axis=0)

DIFF_20 = [np.gradient(stress, strain_adjusted) for stress in S_20]

mean_DIFF_20 = np.mean(DIFF_20, axis=0)
std_DIFF_20 = np.std(DIFF_20, axis=0)

# RVE = 30
DomainPhysicalDimension = 30
RF_30_1 = """8.35E-06
2.20E-05
4.52E-05
8.04E-05
0.000155205
0.000269791
0.000432661
0.000651719
0.000934277
0.00128707
0.0017163
0.00222762
0.00282618
0.00351671
0.00430347
0.00519034
0.0061809
0.00727841
0.00848592
0.0098063
0.0112423
0.0127967
0.0144721
0.0162713
0.0181974
0.0202534
0.0224428
0.0247696
0.0272381
0.0298539
0.0326231
0.0355533
0.0386531
0.0419322
0.0454017
0.0490735
0.0529611
0.0570789
0.0614429
0.0660702
0.0709798
0.0761918
0.0817285
0.0876137
0.0938734
0.100536
0.107631
0.115192
0.123254
0.131854
0.141033
0.150835
0.161304
0.172489
0.184443
0.197218
0.210871
0.225463
0.241055
0.257708
0.275484
0.294441
0.314635
0.336116
0.358926
0.383098
0.408655
0.4356
0.463921
0.493581
0.524519
0.556644
0.589839
0.623955
0.658814
0.694213
0.729923
0.765696
0.801269
0.836371
0.870728
0.904068
0.936132
0.966675
0.995479
1.02235
1.04712
1.06968
1.08994
1.10785
1.12341
1.13665
1.14768
1.15659
1.16355
1.16876
1.17244
1.17485
1.17628
1.17692
1.17727
"""
RF_30_2 = """9.34E-06
2.46E-05
5.06E-05
8.99E-05
0.000173526
0.000301638
0.00048373
0.000728634
0.00104452
0.00143891
0.00191869
0.00249017
0.00315906
0.00393057
0.00480938
0.00579975
0.00690554
0.00813036
0.00947767
0.010951
0.0125541
0.0142914
0.0161677
0.0181886
0.0203608
0.0226912
0.025188
0.0278599
0.0307166
0.0337689
0.0370286
0.0405086
0.0442229
0.0481867
0.0524162
0.056929
0.0617444
0.066884
0.0723722
0.078237
0.0845105
0.0912281
0.098428
0.10615
0.114436
0.123327
0.132866
0.143101
0.154079
0.165854
0.178481
0.19202
0.206534
0.222084
0.238719
0.256552
0.275665
0.296145
0.318078
0.341569
0.366658
0.393411
0.421893
0.452162
0.484268
0.518251
0.554134
0.591925
0.631608
0.673142
0.716456
0.761448
0.807978
0.855869
0.904902
0.95482
1.00533
1.0561
1.10677
1.15696
1.20629
1.25435
1.30077
1.34516
1.38718
1.42653
1.46293
1.49618
1.52612
1.55266
1.57577
1.59548
1.61191
1.62521
1.63561
1.6434
1.64891
1.65251
1.65465
1.6556
1.65613
"""
RF_30_3 = """7.40E-06
1.95E-05
4.01E-05
7.12E-05
0.000137431
0.000238841
0.00038291
0.000576553
0.000826118
0.00113739
0.00151562
0.0019655
0.00249123
0.00309652
0.0037846
0.00455832
0.00542014
0.00637224
0.00741654
0.00855485
0.00978888
0.0111204
0.0125515
0.0140841
0.015721
0.017465
0.0193194
0.021288
0.023375
0.0255848
0.0279225
0.0303933
0.0330027
0.0357568
0.0386611
0.0417189
0.0449285
0.0482915
0.0518145
0.0555078
0.0593879
0.0634799
0.0678096
0.0724026
0.0772852
0.0824853
0.0880318
0.0939553
0.100287
0.107059
0.114306
0.122064
0.130371
0.139266
0.148792
0.158995
0.169921
0.18162
0.194145
0.207547
0.221881
0.237199
0.253552
0.27099
0.289556
0.309287
0.33021
0.352341
0.375682
0.400217
0.425905
0.452685
0.480454
0.509261
0.538848
0.569051
0.599687
0.630565
0.661296
0.691762
0.721717
0.750911
0.779101
0.806055
0.831558
0.855332
0.877306
0.897357
0.915388
0.931352
0.945323
0.957236
0.967156
0.975187
0.981466
0.986165
0.989487
0.991663
0.992952
0.993527
0.993846
"""
RF_30_4 = """7.14E-06
1.88E-05
3.86E-05
6.87E-05
0.000132528
0.000230289
0.000369133
0.00055568
0.000795974
0.00109549
0.00145913
0.00189122
0.00239554
0.00297532
0.00363324
0.0043715
0.0051918
0.00609538
0.00708306
0.00815531
0.00931221
0.0105536
0.011879
0.0132877
0.0147788
0.0163512
0.0180037
0.0197348
0.021543
0.0234266
0.0253838
0.0274128
0.0295116
0.0316777
0.0339081
0.0361993
0.0385485
0.0409548
0.0434208
0.0459534
0.0485642
0.0512682
0.0540836
0.0570298
0.0601269
0.0633953
0.0668542
0.0705216
0.0744136
0.0785444
0.0829263
0.0875701
0.0924856
0.0976817
0.103166
0.108946
0.115028
0.121416
0.128113
0.135118
0.142441
0.150096
0.158096
0.166448
0.175158
0.184217
0.193607
0.203306
0.213291
0.223537
0.234017
0.244696
0.255538
0.266498
0.277529
0.288578
0.299588
0.310498
0.321246
0.331765
0.34199
0.351856
0.361299
0.370261
0.378687
0.386529
0.393748
0.400312
0.406201
0.411405
0.415925
0.419773
0.422974
0.425562
0.427584
0.429097
0.430166
0.430866
0.431281
0.431466
0.431569
"""
RF_30_5 = """7.89E-06
2.08E-05
4.27E-05
7.59E-05
0.000146465
0.000254558
0.000408145
0.000614625
0.000880808
0.00121293
0.00161666
0.00209712
0.00265893
0.0033062
0.00404262
0.00487144
0.00579559
0.00681769
0.00794012
0.0091651
0.0104948
0.0119312
0.0134764
0.0151327
0.0169024
0.0187879
0.020792
0.0229175
0.0251672
0.0275423
0.0300406
0.0326599
0.0354018
0.0382716
0.0412788
0.0444387
0.0477688
0.0512855
0.0550042
0.0589414
0.0631145
0.0675427
0.0722465
0.0772486
0.0825729
0.0882447
0.09429
0.100735
0.107606
0.114929
0.12273
0.131033
0.139865
0.149251
0.159218
0.169793
0.181004
0.192876
0.205438
0.218716
0.232732
0.24751
0.263067
0.279419
0.296574
0.314537
0.333303
0.35286
0.373184
0.394241
0.415983
0.438347
0.461257
0.48462
0.508327
0.532256
0.556268
0.580212
0.603923
0.627226
0.649944
0.671911
0.692982
0.713025
0.731928
0.749593
0.765926
0.780843
0.794278
0.806189
0.816562
0.825415
0.832792
0.838768
0.843442
0.846941
0.849416
0.851039
0.851999
0.852428
0.852666
"""
RF_30 = [np.array([float(x) for x in rf.split()]) for rf in [RF_30_1, RF_30_2, RF_30_3, RF_30_4, RF_30_5]]

S_30 = [rf * (1000 * 1000) / (DomainPhysicalDimension ** 2) for rf in RF_30]

mean_S_30 = np.mean(S_30, axis=0)
std_S_30 = np.std(S_30, axis=0)

DIFF_30 = [np.gradient(stress, strain_adjusted) for stress in S_30]

mean_DIFF_30 = np.mean(DIFF_30, axis=0)
std_DIFF_30 = np.std(DIFF_30, axis=0)


# RVE = 40
DomainPhysicalDimension = 40
RF_40_1 = """1.50E-05
3.95E-05
8.13E-05
0.000144427
0.00027887
0.000484765
0.000777422
0.00117105
0.00167879
0.00231276
0.00308407
0.00400289
0.00507848
0.00631926
0.00773285
0.00932618
0.0111055
0.0130767
0.015245
0.0176155
0.0201932
0.0229831
0.0259903
0.0292204
0.0326794
0.0363741
0.0403124
0.044503
0.0489564
0.0536842
0.0587005
0.0640213
0.0696651
0.0756536
0.0820117
0.0887682
0.095956
0.103613
0.111781
0.120509
0.129849
0.139862
0.150612
0.162168
0.174606
0.188006
0.202455
0.218043
0.234871
0.253043
0.27267
0.293871
0.316773
0.341509
0.368218
0.397046
0.428145
0.461669
0.497754
0.536574
0.578278
0.623001
0.670861
0.721969
0.776364
0.83406
0.895027
0.959179
1.02637
1.0964
1.169
1.24383
1.32054
1.39867
1.47777
1.55734
1.63683
1.7157
1.79341
1.86939
1.94313
2.01411
2.08187
2.14599
2.20611
2.26189
2.31309
2.35951
2.40104
2.43764
2.46936
2.4963
2.51867
2.53665
2.55066
2.56111
2.56847
2.57326
2.57614
2.57743
2.57814
"""
RF_40_2 = """1.83E-05
4.82E-05
9.91E-05
0.00017617
0.000340182
0.000591394
0.00094853
0.001429
0.00204895
0.00282333
0.00376593
0.00488949
0.00620571
0.00772537
0.00945844
0.0114141
0.0136011
0.0160274
0.0187009
0.0216292
0.0248199
0.0282806
0.0320194
0.0360449
0.0403661
0.0449927
0.0499354
0.0552057
0.0608165
0.0667816
0.0731166
0.0798387
0.0869667
0.0945214
0.102525
0.111002
0.119977
0.129475
0.139527
0.150166
0.161429
0.173358
0.185998
0.199398
0.213608
0.228677
0.244661
0.261615
0.279599
0.298676
0.31891
0.340371
0.363128
0.387253
0.412822
0.439909
0.468591
0.498941
0.531035
0.564942
0.600731
0.638462
0.678192
0.719967
0.763824
0.809783
0.857844
0.907985
0.960151
1.01426
1.07019
1.12779
1.18686
1.24717
1.30845
1.37039
1.43264
1.49481
1.55651
1.61731
1.67678
1.73448
1.78999
1.84291
1.89285
1.93949
1.98255
2.02181
2.0571
2.08834
2.11551
2.13867
2.15795
2.17356
2.18575
2.19488
2.20134
2.20557
2.20807
2.20919
2.20981
"""
RF_40_3 = """1.13E-05
2.97E-05
6.10E-05
0.000108478
0.000209463
0.000364264
0.000584314
0.000880422
0.00126247
0.00173976
0.00232072
0.00301324
0.00382447
0.00476117
0.00582943
0.00703494
0.00838312
0.00987911
0.0115276
0.0133329
0.0152996
0.0174321
0.0197345
0.0222114
0.0248674
0.0277074
0.0307359
0.0339586
0.037381
0.0410088
0.0448477
0.0489069
0.0531982
0.0577346
0.0625327
0.0676108
0.0729887
0.0786865
0.0847265
0.0911316
0.097927
0.105137
0.11279
0.120913
0.129532
0.138677
0.148382
0.158677
0.169594
0.181173
0.193448
0.206458
0.220242
0.234843
0.250304
0.26667
0.283984
0.302285
0.321618
0.342021
0.363532
0.386191
0.410027
0.435063
0.461316
0.488789
0.51747
0.54734
0.578356
0.610459
0.643571
0.677592
0.71241
0.74787
0.783809
0.820037
0.856361
0.892536
0.928339
0.963519
0.997829
1.03095
1.06275
1.093
1.1215
1.14808
1.17266
1.19503
1.21515
1.23295
1.24841
1.26157
1.27253
1.28135
1.28824
1.29339
1.29702
1.2994
1.30081
1.30143
1.30178
"""
RF_40_4 = """1.62E-05
4.28E-05
8.80E-05
0.000156351
0.00030187
0.000524693
0.000841344
0.00126712
0.00181613
0.00250131
0.00333446
0.00432629
0.00548644
0.00682352
0.00834521
0.0100583
0.0119687
0.0140816
0.0164016
0.0189328
0.021679
0.0246439
0.027831
0.0312443
0.0348882
0.0387674
0.0428875
0.0472547
0.051876
0.0567596
0.0619152
0.067354
0.0730898
0.0791386
0.0855192
0.0922545
0.0993747
0.106918
0.114927
0.123443
0.132506
0.142151
0.152404
0.163292
0.174847
0.187102
0.200097
0.213873
0.228473
0.243943
0.260328
0.277672
0.296022
0.315422
0.335918
0.357557
0.380382
0.404441
0.429777
0.456433
0.484451
0.513868
0.544715
0.577014
0.610779
0.64601
0.682695
0.720802
0.760283
0.801064
0.843052
0.88613
0.930156
0.974958
1.02034
1.06608
1.11193
1.15762
1.20286
1.24735
1.2908
1.3329
1.37336
1.41189
1.44824
1.48217
1.51349
1.54202
1.56767
1.59038
1.61012
1.62695
1.64096
1.6523
1.66116
1.66779
1.67248
1.67555
1.67737
1.67818
1.67864
"""
RF_40_5 = """1.37E-05
3.61E-05
7.42E-05
0.000131942
0.000254759
0.000442797
0.000709963
0.00106916
0.00153218
0.00210997
0.00281244
0.00365019
0.00463124
0.00576305
0.00705229
0.00850492
0.0101246
0.0119164
0.013884
0.0160315
0.018363
0.0208807
0.0235874
0.0264864
0.0295801
0.0328722
0.0363661
0.0400666
0.0439766
0.0481001
0.052441
0.0570058
0.0618005
0.0667763
0.0719896
0.0774528
0.0831728
0.0891607
0.0954876
0.102124
0.109083
0.116387
0.124058
0.132124
0.14061
0.149545
0.158951
0.168839
0.178795
0.189324
0.200463
0.212252
0.224744
0.238391
0.252724
0.267802
0.283661
0.30032
0.317818
0.335992
0.354995
0.374805
0.395374
0.416389
0.43832
0.460952
0.484403
0.508862
0.533722
0.559104
0.584887
0.610894
0.636854
0.663511
0.690206
0.716905
0.743421
0.769591
0.795264
0.820348
0.844555
0.867832
0.89003
0.911894
0.932834
0.952677
0.971123
0.98806
1.00252
1.0137
1.02303
1.03068
1.03678
1.04146
1.0461
1.04958
1.05204
1.05364
1.05458
1.055
1.05523
"""
RF_40 = [np.array([float(x) for x in rf.split()]) for rf in [RF_40_1, RF_40_2, RF_40_3, RF_40_4, RF_40_5]]

S_40 = [rf * (1000 * 1000) / (DomainPhysicalDimension ** 2) for rf in RF_40]

mean_S_40 = np.mean(S_40, axis=0)
std_S_40 = np.std(S_40, axis=0)

DIFF_40 = [np.gradient(stress, strain_adjusted) for stress in S_40]

mean_DIFF_40 = np.mean(DIFF_40, axis=0)
std_DIFF_40 = np.std(DIFF_40, axis=0)


# RVE = 50
DomainPhysicalDimension = 50
RF_50_1 = """2.44E-05
6.43E-05
0.000132232
0.00023504
0.000453819
0.000788853
0.00126503
0.00190541
0.00273131
0.00376233
0.0050164
0.00650984
0.00825742
0.0102724
0.0125668
0.015151
0.0180343
0.0212251
0.0247306
0.0285572
0.0327108
0.0371969
0.0420206
0.0471874
0.0527028
0.0585728
0.0648041
0.0714041
0.0783813
0.0857452
0.0935068
0.101678
0.110274
0.11931
0.128804
0.138776
0.14925
0.16025
0.171805
0.183946
0.196705
0.210119
0.224224
0.239062
0.254674
0.271102
0.288393
0.306591
0.32574
0.345755
0.366832
0.389022
0.412379
0.436912
0.46286
0.490127
0.518762
0.548811
0.580356
0.613379
0.647908
0.683959
0.721541
0.760649
0.801624
0.844068
0.88792
0.933098
0.992016
1.04363
1.09259
1.14181
1.19175
1.22972
1.27608
1.3262
1.37673
1.4268
1.47609
1.52432
1.57117
1.61635
1.65958
1.70058
1.73913
1.775
1.80801
1.83802
1.86494
1.88869
1.90931
1.92686
1.94144
1.95323
1.96243
1.96931
1.97417
1.97734
1.97922
1.98006
1.98052
"""
RF_50_2 = """1.92E-05
5.04E-05
0.000103741
0.000184389
0.000356003
0.000619202
0.000993174
0.00149616
0.00214478
0.00295424
0.00393828
0.00510981
0.00648015
0.00805948
0.00985712
0.0118812
0.0141388
0.0166365
0.0193804
0.0223758
0.0256279
0.0291418
0.0329223
0.0369746
0.0413048
0.0459191
0.0508253
0.0560306
0.0615447
0.0673765
0.0735389
0.0800438
0.0869049
0.0941361
0.101753
0.109776
0.118221
0.127109
0.136461
0.146304
0.15666
0.167557
0.179025
0.191091
0.203782
0.217133
0.231176
0.245943
0.26147
0.27779
0.294938
0.312948
0.331855
0.351698
0.372515
0.394337
0.417203
0.441147
0.466197
0.492379
0.519715
0.548221
0.577905
0.608769
0.640806
0.674002
0.708325
0.74373
0.780165
0.817549
0.855787
0.894767
0.934348
0.974468
1.01489
1.05543
1.09585
1.13585
1.17521
1.21376
1.25126
1.28749
1.32232
1.35539
1.38648
1.41541
1.44203
1.4662
1.48789
1.50704
1.52367
1.53782
1.54959
1.55909
1.56652
1.57206
1.57598
1.57854
1.58005
1.58072
1.5811
"""
RF_50_3 = """"""
RF_50_4 = """2.25E-05
5.92E-05
0.000121688
0.000216301
0.000417646
0.000725989
0.00116425
0.00175367
0.00251393
0.00346312
0.00461785
0.00599333
0.0076034
0.00946068
0.0115767
0.0139618
0.0166258
0.0195774
0.022825
0.0263766
0.0302398
0.0344221
0.0389312
0.0437746
0.0489602
0.0544963
0.0603915
0.0666551
0.0732967
0.0803268
0.0877567
0.0955988
0.103866
0.112575
0.121741
0.131382
0.141519
0.152171
0.163362
0.175121
0.18748
0.200476
0.214151
0.228548
0.243709
0.259679
0.276504
0.29423
0.312908
0.332588
0.353321
0.37516
0.398158
0.422368
0.447844
0.474639
0.502803
0.532386
0.563433
0.595983
0.63007
0.665718
0.702939
0.741744
0.782116
0.824032
0.867451
0.912315
0.958542
1.00603
1.05467
1.1043
1.15475
1.20582
1.25728
1.30889
1.36037
1.41144
1.4618
1.51113
1.55911
1.60545
1.64982
1.69196
1.7316
1.76852
1.80251
1.83344
1.86119
1.88573
1.90704
1.9252
1.9403
1.95252
1.96207
1.96921
1.97426
1.97756
1.97952
1.98039
1.98088
"""
RF_50_5 = """2.4204E-05
6.3701E-05
0.000131038
0.000232922
0.000449743
0.000781797
0.00125378
0.00188859
0.00270745
0.00372989
0.00497385
0.00645575
0.00819057
0.0101919
0.0124722
0.0150427
0.0179136
0.0210943
0.0245936
0.0284196
0.0325802
0.0370829
0.0419353
0.0471449
0.0527204
0.0586716
0.0650105
0.0717514
0.0789113
0.0865092
0.094567
0.103109
0.112161
0.121756
0.131926
0.14271
0.154152
0.166301
0.179209
0.192936
0.207546
0.223109
0.2397
0.2574
0.276295
0.296479
0.318049
0.341109
0.365768
0.39214
0.420346
0.450511
0.482766
0.517249
0.554098
0.593423
0.635417
0.680243
0.728058
0.779028
0.833353
0.891149
0.952561
1.01773
1.08677
1.15978
1.23682
1.31789
1.40295
1.4919
1.58459
1.68081
1.78025
1.88256
1.98727
2.09383
2.2016
2.3099
2.41796
2.52497
2.63011
2.73253
2.83142
2.92598
3.01549
3.09928
3.1768
3.2476
3.31135
3.36786
3.41706
3.45905
3.49402
3.52235
3.54451
3.56109
3.57282
3.58051
3.58506
3.58709
3.58822
"""
RF_50 = [np.array([float(x) for x in rf.split()]) for rf in [RF_50_1, RF_50_2, RF_50_4, RF_50_5]]

S_50 = [rf * (1000 * 1000) / (DomainPhysicalDimension ** 2) for rf in RF_50]

mean_S_50 = np.mean(S_50, axis=0)
std_S_50 = np.std(S_50, axis=0)

DIFF_50 = [np.gradient(stress, strain_adjusted) for stress in S_50]

mean_DIFF_50 = np.mean(DIFF_50, axis=0)
std_DIFF_50 = np.std(DIFF_50, axis=0)


# RVE = 60
DomainPhysicalDimension = 60
RF_60_1 = """"""
RF_60_2 = """"""
RF_60_3 = """3.16E-05
8.31E-05
0.000170963
0.000303873
0.000586693
0.00101974
0.00163512
0.00246251
0.0035293
0.00486056
0.00647913
0.00840566
0.0106586
0.0132542
0.0162062
0.0195258
0.0232228
0.0273063
0.031785
0.0366676
0.0419631
0.0476799
0.053826
0.060409
0.0674367
0.0749172
0.0828593
0.0912731
0.10017
0.109555
0.119446
0.129861
0.140817
0.152337
0.164449
0.177178
0.190547
0.204587
0.219323
0.234783
0.251002
0.268016
0.285855
0.304578
0.324685
0.345747
0.367837
0.391023
0.415311
0.44035
0.466691
0.494387
0.523501
0.55414
0.586253
0.619923
0.655223
0.692205
0.730907
0.77144
0.813795
0.857966
0.903951
0.951744
1.00132
1.05264
1.10563
1.16023
1.21633
1.27378
1.33245
1.39214
1.45263
1.5137
1.57508
1.63646
1.69755
1.758
1.81747
1.87559
1.93201
1.98637
2.03834
2.08759
2.13385
2.17687
2.21643
2.2524
2.28464
2.31311
2.33783
2.35885
2.37631
2.39041
2.40141
2.4096
2.41537
2.41913
2.42134
2.42232
2.42286
"""
RF_60_4 = """3.31E-05
8.71E-05
0.000179233
0.000318603
0.000615213
0.00106951
0.00171533
0.00258412
0.00370501
0.00510493
0.00680864
0.00883888
0.0112164
0.0139603
0.0170877
0.0206145
0.0245549
0.028922
0.0337278
0.0389833
0.0446988
0.0508838
0.0575476
0.064699
0.0723467
0.0804999
0.0891679
0.0983609
0.10809
0.118367
0.129206
0.140623
0.152635
0.165262
0.178525
0.192448
0.20706
0.222389
0.238467
0.255329
0.273015
0.291565
0.311023
0.331432
0.352919
0.375454
0.399092
0.423889
0.449906
0.477128
0.505696
0.535676
0.567131
0.60013
0.634737
0.67102
0.709042
0.748866
0.790545
0.834124
0.87964
0.927115
0.97656
1.02797
1.08132
1.13657
1.19368
1.25276
1.31354
1.3759
1.43969
1.50472
1.57057
1.63715
1.70418
1.77131
1.83819
1.90445
1.9697
2.03353
2.09554
2.15532
2.21251
2.26674
2.31769
2.36521
2.40888
2.44851
2.48402
2.51536
2.54241
2.56543
2.58458
2.60005
2.61212
2.62112
2.62748
2.63162
2.63407
2.63515
2.63575
"""
RF_60_5 = """3.15E-05
8.29E-05
0.000170465
0.000302996
0.000585033
0.00101695
0.00163083
0.00245646
0.00352135
0.00485085
0.00646821
0.00839468
0.0106496
0.0132506
0.0162135
0.0195527
0.0232813
0.0274117
0.0319558
0.0369251
0.0423313
0.0481861
0.0545006
0.0612859
0.0685519
0.0763079
0.0845657
0.0933413
0.10266
0.11254
0.12307
0.13422
0.146019
0.158493
0.171681
0.185577
0.200257
0.21576
0.232128
0.249407
0.267625
0.28686
0.307171
0.32862
0.351269
0.37518
0.40041
0.427019
0.455067
0.484631
0.515784
0.548614
0.583212
0.61968
0.658092
0.69854
0.741114
0.785896
0.832961
0.882395
0.934267
0.988629
1.04552
1.10494
1.16694
1.23143
1.29834
1.36757
1.43904
1.51243
1.58761
1.66432
1.74227
1.82109
1.9005
1.98007
2.05938
2.13796
2.21534
2.29109
2.36466
2.4356
2.50344
2.56776
2.62812
2.68435
2.73607
2.78305
2.82515
2.86231
2.89444
2.92175
2.94443
2.96275
2.97706
2.98773
2.99525
3.00017
3.00307
3.00436
3.00506
"""
RF_60 = [np.array([float(x) for x in rf.split()]) for rf in [RF_60_3, RF_60_4, RF_60_5]]

S_60 = [rf * (1000 * 1000) / (DomainPhysicalDimension ** 2) for rf in RF_60]

mean_S_60 = np.mean(S_60, axis=0)
std_S_60 = np.std(S_60, axis=0)

DIFF_60 = [np.gradient(stress, strain_adjusted) for stress in S_60]

mean_DIFF_60 = np.mean(DIFF_60, axis=0)
std_DIFF_60 = np.std(DIFF_60, axis=0)


# Use the 'bone' colormap from matplotlib
bone_cmap = plt.cm.bone

# Select distinct values from the colormap (from dark to light, evenly spaced)
COLOR_20 = bone_cmap(0.1)
COLOR_30 = bone_cmap(0.3)
COLOR_40 = bone_cmap(0.5)
COLOR_50 = bone_cmap(0.7)

plt.figure(figsize=(6, 6))

# RVE = 20
plt.loglog(
    strain_adjusted, mean_DIFF_20,
    label="RVE = 20 $\mathrm{\mu}$m", color=COLOR_20,
    linewidth=2, linestyle='-', marker='o', markersize=3
)
plt.fill_between(
    strain_adjusted,
    mean_DIFF_20 - std_DIFF_20,
    mean_DIFF_20 + std_DIFF_20,
    color=COLOR_20,
    alpha=0.2
)

# RVE = 30
plt.loglog(
    strain_adjusted, mean_DIFF_30,
    label="RVE = 30 $\mathrm{\mu}$m", color=COLOR_30,
    linewidth=2, linestyle='--', marker='s', markersize=3
)
plt.fill_between(
    strain_adjusted,
    mean_DIFF_30 - std_DIFF_30,
    mean_DIFF_30 + std_DIFF_30,
    color=COLOR_30,
    alpha=0.2
)

# RVE = 40
plt.loglog(
    strain_adjusted, mean_DIFF_40,
    label="RVE = 40 $\mathrm{\mu}$m", color=COLOR_40,
    linewidth=2, linestyle='-.', marker='^', markersize=3
)
plt.fill_between(
    strain_adjusted,
    mean_DIFF_40 - std_DIFF_40,
    mean_DIFF_40 + std_DIFF_40,
    color=COLOR_40,
    alpha=0.2
)

# RVE = 50
plt.loglog(
    strain_adjusted, mean_DIFF_50,
    label="RVE = 50 $\mathrm{\mu}$m", color=COLOR_50,
    linewidth=2, linestyle=':', marker='D', markersize=3
)
plt.fill_between(
    strain_adjusted,
    mean_DIFF_50 - std_DIFF_50,
    mean_DIFF_50 + std_DIFF_50,
    color=COLOR_50,
    alpha=0.2
)

plt.title("convergence check", fontsize=16, fontweight='bold', fontname='Source Sans Pro')
plt.xlabel("$\lambda - 1$ [-]", fontsize=14, labelpad=0.2)
plt.ylabel("differential modulus [Pa]", fontsize=14, labelpad=0.2)
plt.legend(
    fontsize=12,
    loc="upper left",
    frameon=True,
    borderpad=1.2,
    labelspacing=1.15
)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlim(0.01, 0.49)
plt.ylim(50, 50000)
plt.grid(True, which="both", ls="--", lw=0.5)

output_path = os.path.join(output_directory, "convergence_check.svg")
plt.savefig(output_path, format="svg")
plt.show()
